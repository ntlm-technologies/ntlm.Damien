name: Create Release

on:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: windows-latest  # Environnement Windows

    steps:
      - name: Checkout repository content
        uses: actions/checkout@v4

      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.x'

      - name: Build project
        run: dotnet publish ./ntlm.Damien.Win/ntlm.Damien.Win.csproj --configuration Release --output ./publish

      - name: Verify build output
        run: |
          echo "Listing contents of the publish directory:"
          Get-ChildItem ./publish

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: 'v1.0.${{ github.run_number }}'
          release_name: 'Release v1.0.${{ github.run_number }}'
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Log upload_url
        run: |
          echo "Upload URL: ${{ steps.create_release.outputs.upload_url }}"

      - name: Upload EXE to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./publish/NtlmGithubManager.exe
          asset_name: NtlmGithubManager.exe
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Étape pour installer la CLI GitHub manuellement sur Windows
      - name: Install GitHub CLI
        run: |
          curl -sSL https://github.com/cli/cli/releases/download/v2.33.0/gh_2.33.0_windows_amd64.msi -o gh-cli.msi
          msiexec /i gh-cli.msi /quiet
          gh --version  # Vérification de l'installation

      - name: List release assets with debug info
        run: |
          echo "Listing all assets for the release..."
          $asset_ids = gh release view v1.0.${{ github.run_number }} --json assets --jq '.assets[] | select(.name | test("Source code")) | .id'
          echo "Assets found: $asset_ids"  # Debug : Afficher les IDs récupérés
          $asset_ids_array = $asset_ids -split "`n"
          foreach ($id in $asset_ids_array) {
            echo "Attempting to delete asset with ID: $id"  # Debug : Afficher l'ID à supprimer
            gh release delete-asset v1.0.${{ github.run_number }} $id --yes
          }
        shell: pwsh
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Mappez GITHUB_TOKEN à GH_TOKEN pour authentification
